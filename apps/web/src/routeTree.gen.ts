/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as Char123LocaleChar125RouteRouteImport } from './routes/{-$locale}/route'
import { Route as Char123LocaleChar125LayoutRouteRouteImport } from './routes/{-$locale}/_layout/route'
import { Route as Char123LocaleChar125LayoutIndexRouteImport } from './routes/{-$locale}/_layout/index'
import { Route as Char123LocaleChar125LayoutNumbersRouteImport } from './routes/{-$locale}/_layout/numbers'
import { ServerRoute as TrpcSplatServerRouteImport } from './routes/trpc.$'
import { ServerRoute as AuthSplatServerRouteImport } from './routes/auth.$'

const rootServerRouteImport = createServerRootRoute()

const Char123LocaleChar125RouteRoute =
  Char123LocaleChar125RouteRouteImport.update({
    id: '/{-$locale}',
    path: '/{-$locale}',
    getParentRoute: () => rootRouteImport,
  } as any)
const Char123LocaleChar125LayoutRouteRoute =
  Char123LocaleChar125LayoutRouteRouteImport.update({
    id: '/_layout',
    getParentRoute: () => Char123LocaleChar125RouteRoute,
  } as any)
const Char123LocaleChar125LayoutIndexRoute =
  Char123LocaleChar125LayoutIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => Char123LocaleChar125LayoutRouteRoute,
  } as any)
const Char123LocaleChar125LayoutNumbersRoute =
  Char123LocaleChar125LayoutNumbersRouteImport.update({
    id: '/numbers',
    path: '/numbers',
    getParentRoute: () => Char123LocaleChar125LayoutRouteRoute,
  } as any)
const TrpcSplatServerRoute = TrpcSplatServerRouteImport.update({
  id: '/trpc/$',
  path: '/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const AuthSplatServerRoute = AuthSplatServerRouteImport.update({
  id: '/auth/$',
  path: '/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/{-$locale}': typeof Char123LocaleChar125LayoutRouteRouteWithChildren
  '/{-$locale}/numbers': typeof Char123LocaleChar125LayoutNumbersRoute
  '/{-$locale}/': typeof Char123LocaleChar125LayoutIndexRoute
}
export interface FileRoutesByTo {
  '/{-$locale}': typeof Char123LocaleChar125LayoutIndexRoute
  '/{-$locale}/numbers': typeof Char123LocaleChar125LayoutNumbersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/{-$locale}': typeof Char123LocaleChar125RouteRouteWithChildren
  '/{-$locale}/_layout': typeof Char123LocaleChar125LayoutRouteRouteWithChildren
  '/{-$locale}/_layout/numbers': typeof Char123LocaleChar125LayoutNumbersRoute
  '/{-$locale}/_layout/': typeof Char123LocaleChar125LayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/{-$locale}' | '/{-$locale}/numbers' | '/{-$locale}/'
  fileRoutesByTo: FileRoutesByTo
  to: '/{-$locale}' | '/{-$locale}/numbers'
  id:
    | '__root__'
    | '/{-$locale}'
    | '/{-$locale}/_layout'
    | '/{-$locale}/_layout/numbers'
    | '/{-$locale}/_layout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  Char123LocaleChar125RouteRoute: typeof Char123LocaleChar125RouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/auth/$': typeof AuthSplatServerRoute
  '/trpc/$': typeof TrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/auth/$': typeof AuthSplatServerRoute
  '/trpc/$': typeof TrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/auth/$': typeof AuthSplatServerRoute
  '/trpc/$': typeof TrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/auth/$' | '/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/auth/$' | '/trpc/$'
  id: '__root__' | '/auth/$' | '/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  AuthSplatServerRoute: typeof AuthSplatServerRoute
  TrpcSplatServerRoute: typeof TrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/{-$locale}': {
      id: '/{-$locale}'
      path: '/{-$locale}'
      fullPath: '/{-$locale}'
      preLoaderRoute: typeof Char123LocaleChar125RouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/{-$locale}/_layout': {
      id: '/{-$locale}/_layout'
      path: ''
      fullPath: '/{-$locale}'
      preLoaderRoute: typeof Char123LocaleChar125LayoutRouteRouteImport
      parentRoute: typeof Char123LocaleChar125RouteRoute
    }
    '/{-$locale}/_layout/': {
      id: '/{-$locale}/_layout/'
      path: '/'
      fullPath: '/{-$locale}/'
      preLoaderRoute: typeof Char123LocaleChar125LayoutIndexRouteImport
      parentRoute: typeof Char123LocaleChar125LayoutRouteRoute
    }
    '/{-$locale}/_layout/numbers': {
      id: '/{-$locale}/_layout/numbers'
      path: '/numbers'
      fullPath: '/{-$locale}/numbers'
      preLoaderRoute: typeof Char123LocaleChar125LayoutNumbersRouteImport
      parentRoute: typeof Char123LocaleChar125LayoutRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/trpc/$': {
      id: '/trpc/$'
      path: '/trpc/$'
      fullPath: '/trpc/$'
      preLoaderRoute: typeof TrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/auth/$': {
      id: '/auth/$'
      path: '/auth/$'
      fullPath: '/auth/$'
      preLoaderRoute: typeof AuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface Char123LocaleChar125LayoutRouteRouteChildren {
  Char123LocaleChar125LayoutNumbersRoute: typeof Char123LocaleChar125LayoutNumbersRoute
  Char123LocaleChar125LayoutIndexRoute: typeof Char123LocaleChar125LayoutIndexRoute
}

const Char123LocaleChar125LayoutRouteRouteChildren: Char123LocaleChar125LayoutRouteRouteChildren =
  {
    Char123LocaleChar125LayoutNumbersRoute:
      Char123LocaleChar125LayoutNumbersRoute,
    Char123LocaleChar125LayoutIndexRoute: Char123LocaleChar125LayoutIndexRoute,
  }

const Char123LocaleChar125LayoutRouteRouteWithChildren =
  Char123LocaleChar125LayoutRouteRoute._addFileChildren(
    Char123LocaleChar125LayoutRouteRouteChildren,
  )

interface Char123LocaleChar125RouteRouteChildren {
  Char123LocaleChar125LayoutRouteRoute: typeof Char123LocaleChar125LayoutRouteRouteWithChildren
}

const Char123LocaleChar125RouteRouteChildren: Char123LocaleChar125RouteRouteChildren =
  {
    Char123LocaleChar125LayoutRouteRoute:
      Char123LocaleChar125LayoutRouteRouteWithChildren,
  }

const Char123LocaleChar125RouteRouteWithChildren =
  Char123LocaleChar125RouteRoute._addFileChildren(
    Char123LocaleChar125RouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  Char123LocaleChar125RouteRoute: Char123LocaleChar125RouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  AuthSplatServerRoute: AuthSplatServerRoute,
  TrpcSplatServerRoute: TrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
